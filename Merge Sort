**********************************************APPROACH***************************************************

mergesort(head)
{

Base case{return head if size of LL is 0 or 1}
find mid using mid function
part1head=head;
par2head=mid->next;
//break connection(split LL into two)
{mid->next=NULL}
part1head=mergesort(part1head);
part2head=mergesort(part2head);
//Now merge two LL using merge function
head=merge(part1head,part2head);
return head;
}

************************************************************************************************************


**********************************************SOLUTION*******************************************************


Node *midPoint(Node *head) {
  if (head == NULL || head->next == NULL)
    return head;
  Node *slow = head;
  Node *fast = head->next;
  while (fast != NULL) {
    if (fast->next == NULL)
      return slow;
    slow = slow->next;
    fast = fast->next->next;
  }
  return slow;
}


Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2) {
  if (head1 == NULL) {
    if (head2 == NULL)
      return head1;
    return head2;
  } else if (head2 == NULL) {
    return head1;
  }

  Node *fhead = NULL;
  Node *ftail = NULL;
  while (head1 != NULL && head2 != NULL) {
    if (head1->data <= head2->data) {
      if (fhead == NULL && ftail == NULL) {
        fhead = head1;
        ftail = head1;
      } else {
        ftail->next = head1;
        ftail = head1;
      }
      head1 = head1->next;
    } else {
      if (fhead == NULL && ftail == NULL) {
        fhead = head2;
        ftail = head2;
      } else {
        ftail->next = head2;
        ftail = head2;
      }
      head2 = head2->next;
    }
  }

  if (head1 != NULL) {
    ftail->next = head1;
  } else
    ftail->next = head2;

  return fhead;
}

Node *mergeSort(Node *head)
{
	if(head==NULL||head->next==NULL)
                    return head;
  Node *mid=midPoint(head);
  Node *part1head=head;
  Node *part2head=mid->next;
  mid->next=NULL;
  part1head=mergeSort(part1head);
  part2head=mergeSort(part2head);
  head=mergeTwoSortedLinkedLists(part1head,part2head);
  return head;
}

***********************************************************************************************************

*************************************main function*********************************************************


#include <iostream>

class Node
{
public:
	int data;
	Node *next;
	Node(int data)
	{
		this->data = data;
		this->next = NULL;
	}
};

using namespace std;
#include "solution.h"

Node *takeinput()
{
	int data;
	cin >> data;
	Node *head = NULL, *tail = NULL;
	while (data != -1)
	{
		Node *newnode = new Node(data);
		if (head == NULL)
		{
			head = newnode;
			tail = newnode;
		}
		else
		{
			tail->next = newnode;
			tail = newnode;
		}
		cin >> data;
	}
	return head;
}

void print(Node *head)
{
	Node *temp = head;
	while (temp != NULL)
	{
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}

int main()
{
	int t;
	cin >> t;

	while (t--)
	{
		Node *head = takeinput();
		head = mergeSort(head);
		print(head);
	}

	return 0;
}

*****************************************************************************************************
